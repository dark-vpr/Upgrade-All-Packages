#!/bin/bash
RESET="\033[0m"
BOLD="\033[1m"
YELLOW="\033[0;33m"
BLUE='\033[1;94m'

PkgU() {
	printf "\n${BLUE}%s${RESET}\n" "Upgrade:"
	echo
	pkg upgrade
	echo
	echo
	echo 'Auto Purge:'
	echo
	apt autopurge
	echo
	pkg autoclean
}

NalaU() {
	if [ "$OSTYPE" = "linux-android" ]; then
		echo
		echo
		echo 'Nala Upgrade:'
		echo
		nala full-upgrade
		echo
		echo
		echo 'Auto Purge:'
		echo
		nala autopurge
		echo
		nala clean
	else
		printf "\n${BLUE}%s${RESET}\n" "Nala Upgrade:"
		echo
		sudo nala full-upgrade
		echo
		echo
		echo 'Auto Purge:'
		echo
		sudo nala autopurge
		echo
		sudo nala clean
	fi
}

AptU() {
	echo 'dpkg:'
	echo
	sudo dpkg --configure -a
	echo
	echo 'Fix Broken:'
	echo
	sudo apt --fix-broken install
	echo
	sudo apt update
	echo
	echo 'Upgrade:'
	echo
	sudo apt full-upgrade
	echo
	echo
	echo 'Auto Purge:'
	echo
	sudo apt autopurge
	echo
	sudo apt autoclean
}

FlatU() {
	echo
	echo
	echo 'Flatpak Upgrade:'
	echo
	sudo flatpak update
}

PipxU() {
	echo
	echo
	echo 'Pipx Upgrade:'
	echo
	pipx upgrade-all
}

UvU() {
	echo
	echo
	echo 'Upgrading uv tools:'
	echo
	uv tool upgrade --all
	while true; do
		echo
		echo
		read -rp "Continue to Upgrade Python Packages [THE UV WAY]..... [s|Y|n]: " syn
		syn=${syn:-'y'}
		case $syn in
		[yY]*)
			sudo uv pip freeze --system | cut -d '=' -f 1 | xargs sudo uv pip install --break-system-packages --system -U
			break
			;;
		[sS]*)
			pip list -o
			while true; do
				echo
				read -rp "Upgrade now..... [Y|n]: " yn
				yn=${yn:-'y'}
				case $yn in
				[nN]*)
					echo "Aborting....."
					break
					;;
				[yY]*)
					sudo uv pip freeze --system | cut -d '=' -f 1 | xargs sudo uv pip install --break-system-packages --system -U
					break
					;;
				*)
					echo 'Wrong Choice.....'
					;;
				esac
			done
			break
			;;
		[nN]*)
			echo "Aborting....."
			break
			;;
		*)
			echo 'Wrong Choice.....'
			;;
		esac
	done
}

PdmU() {
	echo
	echo
	echo 'PDM Upgrade:'
	echo
	pdm update --self
	pdm update
}

PipU() {
	while true; do
		echo
		echo
		read -rp "Continue to Upgrade Python Packages..... [s|Y|n]: " syn
		syn=${syn:-'y'}
		case $syn in
		[yY]*)
			pip list -o
			pip list -o | awk 'NR>=3 {print $1}' | xargs -n1 pip install -U
			break
			;;
		[sS]*)
			pip list -o
			while true; do
				echo
				read -rp "Upgrade now..... [Y|n]: " yn
				yn=${yn:-'y'}
				case $yn in
				[nN]*)
					echo "Aborting....."
					break
					;;
				[yY]*)
					pip list -o | awk 'NR>=3 {print $1}' | xargs -n1 pip install -U
					break
					;;
				*)
					echo 'Wrong Choice.....'
					;;
				esac
			done
			break
			;;
		[nN]*)
			echo "Aborting....."
			break
			;;
		*)
			echo 'Wrong Choice.....'
			;;
		esac
	done
}

RustupU() {
	echo
	echo
	echo 'Rustup Upgrade:'
	echo
	rustup update
}

CargoU() {
	echo
	echo
	echo 'Cargo Upgrade:'
	echo
	if [ "$(command -v cargo-install-update)" ]; then
		cargo install-update --all
	else
		cargo install --list | grep ":" | cut -d " " -f1 | xargs cargo install
	fi
}

GemU() {
	echo
	echo
	echo 'Gem Upgrade:'
	echo
	gem update
}

FisherU() {
	echo
	echo
	echo 'Fisher Upgrade:'
	echo
	fish -c "fisher update"
}
TmuxU() {
	echo
	echo
	echo 'Tmux Plugins Upgrade:'
	echo
	~/.tmux/plugins/tpm/bin/update_plugins all
}

CodeU() {
	echo
	echo
	echo "VSCode Extensions Upgrade:"
	echo
	code --update-extensions
}

NpmU() {
	echo
	echo
	echo 'Npm Upgrade:'
	echo
	if [ "$OSTYPE" = "linux-android" ]; then
		npm update
		npm update -g
	else
		sudo npm update
		sudo npm update -g
	fi			
}

ToolU() {
	cd "$1" || return
	echo
	printf "\n${BLUE}%s${RESET}\n" "Updating GitHub Packages(\"${PWD##*/}\"):"
	if [ -d ".git" ]; then
		echo 
		printf "${YELLOW}${BOLD}%s${RESET}\n" "${PWD##*/}"
		git pull
	fi
	for plugin in */; do
		if [ -d "$plugin/.git" ]; then
			echo
			printf "${YELLOW}${BOLD}%s${RESET}\n" "${plugin%/}"
			git -C "$plugin" pull
		fi
	done
}

if [ "$(command -v nala)" ]; then
	NalaU
elif [ "$(command -v pkg)" ]; then
	PkgU
elif [ "$(command -v apt)" ]; then
	AptU
fi

if [ "$(command -v flatpak)" ]; then
	FlatU
fi

if [ "$(command -v uv)" ] && [ "$OSTYPE" != "linux-android" ]; then
	UvU
elif [ "$(command -v pip)" ]; then
	PipU
fi

if [ "$(command -v pipx)" ]; then
	PipxU
fi

if [ "$(command -v rustup)" ]; then
	RustupU
	CargoU
fi

if [ "$(command -v pdm)" ]; then
	PdmU
fi

# if [ "$(command -v gem)" ]; then
# 	GemU
# fi

if [ -f ~/.config/fish/functions/fisher.fish ]; then
	FisherU
fi

if [ "$(command -v code)" ]; then
	CodeU
fi

if [ "$(command -v npm)" ]; then
	NpmU
fi

if [ -f ~/.tmux/plugins/tpm/bin/update_plugins ]; then
	TmuxU
fi

#GIT PACKAGES
if [ -f "$HOME"/.config/ugpack.conf ]; then
	while read -r LINE; do
		ToolU "$LINE"
	done < <(grep -v "^#\|^$" "$HOME"/.config/ugpack.conf)
elif [ -f "$HOME"/.config/UGpack/ugpack.conf ]; then
	while read -r LINE; do
		ToolU "$LINE"
	done < <(grep -v "^#\|^$" "$HOME"/.config/UGpack/ugpack.conf)
fi
