#!/bin/bash
RESET="\033[0m"
BOLD="\033[1m"
YELLOW="\033[0;33m"
BLUE='\033[1;94m'

PkgU() {
	printf "\n${BLUE}%s${RESET}\n" "Upgrade:"
	echo
	pkg upgrade
	echo
	echo
	echo 'Auto Purge:'
	echo
	apt autopurge
	echo
	pkg autoclean
}

NalaU() {
	if [ "$OSTYPE" = "linux-android" ]; then
		echo
		echo 'dpkg:'
		echo
		dpkg --configure -a
		echo
		echo 'Nala Upgrade:'
		echo
		nala full-upgrade
		echo
		echo
		echo 'Auto Purge:'
		echo
		nala autopurge
		echo
		nala clean
	else
		echo
		echo 'dpkg:'
		echo
		sudo dpkg --configure -a
		echo
		printf "\n${BLUE}%s${RESET}\n" "Nala Upgrade:"
		echo
		sudo nala full-upgrade
		echo
		echo
		echo 'Auto Purge:'
		echo
		sudo nala autopurge
		echo
		sudo nala clean
	fi
}

AptU() {
	echo 'dpkg:'
	echo
	sudo dpkg --configure -a
	echo
	echo 'Fix Broken:'
	echo
	sudo apt --fix-broken install
	echo
	sudo apt update
	echo
	echo 'Upgrade:'
	echo
	sudo apt full-upgrade
	echo
	echo
	echo 'Auto Purge:'
	echo
	sudo apt autopurge
	echo
	sudo apt autoclean
}

FlatU() {
	echo
	echo
	echo 'Flatpak Upgrade:'
	echo
	sudo flatpak update
}

PipxU() {
	echo
	echo
	echo 'Pipx Upgrade:'
	echo
	pipx upgrade-all
}

PdmU() {
	echo
	echo
	echo 'PDM Upgrade:'
	echo
	pdm update --self
	pdm update
}

UvU() {
	UvpipU() {
		echo
		echo
		UVPackageS=$(uv pip list --outdated --system)
		if [ -n "$UVPackageS" ]; then
			echo "$UVPackageS"
			while true; do
				read -rp "Continue to Upgrade Python Packages [THE UV WAY]..... [Y|n]: " yn
				yn=${yn:-'y'}
				case "$yn" in
				[nN]*)
					echo "Aborting....."
					break
					;;
				[yY]*)
					echo
					echo "Upgrading Python Packages....."
					echo "$UVPackageS" | awk 'NR>=3 {print $1}' | xargs -l1 uv pip install --break-system-packages --system -U
					# uv pip freeze --system | cut -d '=' -f 1 | xargs uv pip install --break-system-packages --system -U
					break
					;;
				*)
					echo 'Wrong Choice.....'
					;;
				esac
			done
		else
			echo "No Python Packages to Upgrade....."
		fi
		echo
		uv cache prune
		pip cache purge
	}
	echo
	echo
	echo 'Upgrading uv tools:'
	echo
	uv tool upgrade --all
	if [ "$OSTYPE" = "linux-android" ]; then
		UvpipU
	else
		sudo bash -c "$(declare -f UvpipU); UvpipU"
		uv cache prune
		pip cache purge
	fi
}

PipU() {
	while true; do
		echo
		echo
		read -rp "Continue to Upgrade Python Packages..... [s|Y|n]: " syn
		syn=${syn:-'y'}
		case "$syn" in
		[yY]*)
			PIPPackageS=$(pip list -o)
			echo "$PIPPackageS"
			echo "$PIPPackageS" | awk 'NR>=3 {print $1}' | xargs -n1 pip install -U
			break
			;;
		[sS]*)
			PIPPackageS=$(pip list -o)
			if [ -n "$PIPPackageS" ]; then
				echo "$PIPPackageS"
				while true; do
					echo
					read -rp "Upgrade now..... [Y|n]: " yn
					yn=${yn:-'y'}
					case "$yn" in
					[nN]*)
						echo "Aborting....."
						break
						;;
					[yY]*)
						echo "$PIPPackageS" | awk 'NR>=3 {print $1}' | xargs -n1 pip install -U
						break
						;;
					*)
						echo 'Wrong Choice.....'
						;;
					esac
				done
			else
				echo
				echo "No Python Packages to Upgrade....."
			fi
			break
			;;
		[nN]*)
			echo "Aborting....."
			break
			;;
		*)
			echo 'Wrong Choice.....'
			;;
		esac
	done
	echo
	pip cache purge
}

RustupU() {
	echo
	echo
	echo 'Rustup Upgrade:'
	echo
	rustup update
}

CargoU() {
	echo
	echo
	echo 'Cargo Upgrade:'
	echo
	if [ "$(command -v cargo-install-update)" ]; then
		cargo install-update --all -g
		if [ "$(command -v cargo-cache)" ]; then
			cargo cache -a
		else
			echo
			echo
			read -rp "Install cargo-cache..... [Y|n]: " yn
			yn=${yn:-'y'}
			if [[ "$yn" =~ ^[yY] ]]; then
				cargo install cargo-cache
				cargo cache -a
			fi
		fi
	else
		cargo install --list | grep ":" | cut -d " " -f1 | xargs cargo install
		if [ "$(command -v cargo-cache)" ]; then
			cargo cache -a
		else
			echo
			read -rp "Install cargo-cache..... [Y|n]: " yn
			yn=${yn:-'y'}
			if [[ "$yn" =~ ^[yY] ]]; then
				cargo install cargo-cache
				cargo cache -a
			fi
		fi
	fi
}

GemU() {
	echo
	echo
	echo 'Gem Upgrade:'
	echo
	gem update
}

FisherU() {
	echo
	echo
	echo 'Fisher Upgrade:'
	echo
	fish -c "fisher update"
}
TmuxU() {
	echo
	echo
	echo 'Tmux Plugins Upgrade:'
	echo
	~/.tmux/plugins/tpm/bin/update_plugins all
}

CodeU() {
	echo
	echo
	echo "VSCode Extensions Upgrade:"
	echo
	code --update-extensions
}

NpmU() {
	echo
	echo
	echo 'NPM Upgrade:'
	echo
	if [ "$OSTYPE" = "linux-android" ]; then
		npm update -g
	else
		sudo npm update -g
	fi
}

PnpmU() {
	echo
	echo
	echo 'PNPM Upgrade:'
	echo
	if [ "$OSTYPE" = "linux-android" ]; then
		pnpm update -g
	else
		pnpm update -g
		sudo pnpm update -g
	fi
}

DockerU() {
	echo
	echo
	echo 'Docker Upgrade:'
	echo
	images=$(sudo docker images -f "dangling=false" --format "{{.Repository}}:{{.Tag}}")
	if [ -n "$images" ]; then
		echo "$images" | xargs -L1 sudo docker pull
	else
		echo "No images to update"
	fi
}

ToolU() {
	cd "$1" || return
	echo
	printf "\n${BLUE}%s${RESET}\n" "Updating GitHub Packages(\"${PWD##*/}\"):"
	if [ -d ".git" ]; then
		echo
		printf "${YELLOW}${BOLD}%s${RESET}\n" "${PWD##*/}"
		git pull
	fi
	for plugin in */; do
		if [ -d "$plugin/.git" ]; then
			echo
			printf "${YELLOW}${BOLD}%s${RESET}\n" "${plugin%/}"
			git -C "$plugin" pull
		fi
	done
}

#SYSTEM:
if [ "$(command -v nala)" ]; then
	NalaU
elif [ "$(command -v pkg)" ]; then
	PkgU
elif [ "$(command -v apt)" ]; then
	AptU
fi

[ "$(command -v flatpak)" ] && FlatU

#FISH:
[ -f ~/.config/fish/functions/fisher.fish ] && FisherU

#PYTHON:
if [ "$(command -v uv)" ]; then
	UvU
elif [ "$(command -v pip)" ]; then
	PipU
fi
[ "$(command -v pipx)" ] && PipxU
[ "$(command -v pdm)" ] && PdmU

#RUST:
[ "$(command -v rustup)" ] && RustupU && CargoU

# [ "$(command -v gem)" ] && GemU

#VSCODE:
[ "$(command -v code)" ] && CodeU

#NODE:
[ "$(command -v npm)" ] && NpmU
[ "$(command -v pnpm)" ] && PnpmU

#DOCKER:
[ "$(command -v docker)" ] && DockerU

#TMUX:
[ -f ~/.tmux/plugins/tpm/bin/update_plugins ] && TmuxU

#GIT PACKAGES
if [ -f "$HOME"/.config/ugpack.conf ]; then
	while read -r LINE; do
		ToolU "$LINE"
	done < <(grep -v "^#\|^$" "$HOME"/.config/ugpack.conf)
elif [ -f "$HOME"/.config/UGpack/ugpack.conf ]; then
	while read -r LINE; do
		ToolU "$LINE"
	done < <(grep -v "^#\|^$" "$HOME"/.config/UGpack/ugpack.conf)
fi
